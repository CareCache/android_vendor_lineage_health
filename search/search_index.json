{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CareCache \u00b6 CareCache (also called \u201cLineage Health Mod\u201d) allows applications to store and share health-related data in a secure environment that never leaves your device and gives the user strong control over the data flow. While this is a LineageOS\u2019 project, it is designed to be used on any Android distribution that provides the standard Android SDK APIs at level 27 or higher (Android 8.1) as well. License \u00b6 Copyright (C) 2020-2021 The LineageOS Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#carecache","text":"CareCache (also called \u201cLineage Health Mod\u201d) allows applications to store and share health-related data in a secure environment that never leaves your device and gives the user strong control over the data flow. While this is a LineageOS\u2019 project, it is designed to be used on any Android distribution that provides the standard Android SDK APIs at level 27 or higher (Android 8.1) as well.","title":"CareCache"},{"location":"#license","text":"Copyright (C) 2020-2021 The LineageOS Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"build/","text":"Build \u00b6 It is possible to build the CareCache app both from Android Studio / gradle and from an Android (AOSP) build environment (for Android 10 / API 29 and higher). Gradle \u00b6 You can compile with gradle by running ./gradlew :mod:assemble Android 10(+) build environment \u00b6 It is possible to simply include the source repo in your build environment at vendor/lineage/health and make sure the target package CareCache is included in your build. Testing \u00b6 Tests are implemented in the :mod module. Both end-to-end (sdk-to-db) tests and unit tests should be put here in order to facilitate debugging of the module component. Tests found here could be also used to verify whether the current implementation of the Health Mod installed on the device adheres to the official implementation details. You can execute the tests by running: ./gradlew :mod:connectedCheck","title":"Build"},{"location":"build/#build","text":"It is possible to build the CareCache app both from Android Studio / gradle and from an Android (AOSP) build environment (for Android 10 / API 29 and higher).","title":"Build"},{"location":"build/#gradle","text":"You can compile with gradle by running ./gradlew :mod:assemble","title":"Gradle"},{"location":"build/#android-10-build-environment","text":"It is possible to simply include the source repo in your build environment at vendor/lineage/health and make sure the target package CareCache is included in your build.","title":"Android 10(+) build environment"},{"location":"build/#testing","text":"Tests are implemented in the :mod module. Both end-to-end (sdk-to-db) tests and unit tests should be put here in order to facilitate debugging of the module component. Tests found here could be also used to verify whether the current implementation of the Health Mod installed on the device adheres to the official implementation details. You can execute the tests by running: ./gradlew :mod:connectedCheck","title":"Testing"},{"location":"components/","text":"Components \u00b6 The Lineage Health Platform is written in Java and Kotlin. It supports Android devices providing SDK API level 27 or higher. The following architectures are supported by the Lineage Health Mod: armeabi-v7a , arm64-v8a , x86 , x86_64 . Other architectures are not supported due to the usage of the sqlcipher library . :core \u00b6 Code shared across the :mod and :sdk modules. Language: Java Dependencies androidX/annotation :mod \u00b6 The module to be installed in the device. If included in a system build, it is recommended to put it in the system (or product) partition but not in vendor. Holds the ContentProviders that host the health data. Language: Kotlin Dependencies :core androidX/annotation kotlin/stdlib/jvm sqlcipher androidX/sqlite :sdk \u00b6 Provides simple APIs for the usage of the Mod ContentProvider s through data objects and repositories. Language: Java Dependencies :core androidX/annotation","title":"Components"},{"location":"components/#components","text":"The Lineage Health Platform is written in Java and Kotlin. It supports Android devices providing SDK API level 27 or higher. The following architectures are supported by the Lineage Health Mod: armeabi-v7a , arm64-v8a , x86 , x86_64 . Other architectures are not supported due to the usage of the sqlcipher library .","title":"Components"},{"location":"components/#core","text":"Code shared across the :mod and :sdk modules. Language: Java Dependencies androidX/annotation","title":":core"},{"location":"components/#mod","text":"The module to be installed in the device. If included in a system build, it is recommended to put it in the system (or product) partition but not in vendor. Holds the ContentProviders that host the health data. Language: Kotlin Dependencies :core androidX/annotation kotlin/stdlib/jvm sqlcipher androidX/sqlite","title":":mod"},{"location":"components/#sdk","text":"Provides simple APIs for the usage of the Mod ContentProvider s through data objects and repositories. Language: Java Dependencies :core androidX/annotation","title":":sdk"},{"location":"entities/","text":"Data entities \u00b6 Records \u00b6 A Record is a data entity that represents an health-related information. Records are divided in metrics in order to be grouped with similar data entities. Metrics are grouped in four macro-groups: Activity \u00b6 Fitness-related metrics Metric id Type Description Values 0001 CyclingRecord Cycling distance [ km ], elevationGain [ m ], avgSpeed [ km/h ], time, duration 0002 RunningRecord Running distance [ km ], avgSpeed [ km/h ], time, duration 0003 WalkingRecord Steps counter distance [ km ], steps, time, duration 0004 WorkoutRecord Workout activity calories [ cal ], notes, time range Body \u00b6 Body-related metrics Metric id Type Description Values 1001 AbdominalCircumferenceRecord Abdominal circumference value [ cm ], time 1002 BodyMassIndexRecord BMI value [ kg/(m^2) ], time 1003 BodyTemperatureRecord Body temperature value [ \u00baC ], time 1004 LeanBodyMassRecord Lean body mass value, time 1005 MenstrualCycleRecord Menstrual cycle flow sexualActivity, physicalSymptoms, otherSymptoms, value (flow), time 1006 UvIndexRecord Uv index value, time 1007 WaterIntakeRecord Intake of a glass of water value (glasses), time 1008 WeightRecord Mass (aka Weight) value [ kg ], time Breathing \u00b6 Breathing-related metrics Metric id Type Description Values 2001 InhalerUsageRecord Inhaler usage notes, time 2002 OxygenSaturationRecord Inhaler usage value [ % ], time 2003 PeakExpiratoryFlowRecord Inhaler usage value [ PEF ], time 2004 RespiratoryRateRecord Respiratory rate value [ bpm ], time 2005 VitalCapacityRecord Vital capacity value [ cm^3 ], time Heart & blood \u00b6 Heart and blood metrics Metric id Type Description Values 3001 BloodAlcoholConcentrationRecord Blood / Alcohol content value [ % ], time 3002 BloodPressureRecord Blood pressure systolic [ mmHg ], diastolic [ mmHg ], time 3003 GlucoseRecord Blood glucose value [ mg/dL ], is before meal, time 3004 HeartRateRecord Heart rate value [ bpm ], time 3005 PerfusionIndexRecord Perfusion index value [ % ], time Mindfulness \u00b6 Mindfulness and well-being metrics Metric id Type Description Values 4001 MeditationRecord Meditation time, duration 4002 MoodRecord Mood journal moodLevel, notes, time, duration 4003 SleepRecord Sleep time, duration Medical profile \u00b6 A medical profile consists of a set of fixed basic medical information about the user. This data will not have the same level of protection like the Records in order to allow access from when the screen is locked in case of emergency. Name Description Allergies A note about user\u2019s allergies Biological sex User\u2019s biological sex Blood type User\u2019s blood type Height Height of the user [ cm ] (Is an) organ donor Whether the user is an organ donor Medications A note about user\u2019s medications Notes Any additional information the user may want to provide Reference values \u00b6 Records and Medical profiles have some fields that accept only a fixed set of possible values. Biological sex \u00b6 Name Value Unknown 0 Female 1 Male 2 BloodType \u00b6 Name Value Unknown 0 0- 1 0+ 2 A- 3 A+ 4 B- 5 B+ 6 AB- 7 AB+ 8 HH 9 Meal relation \u00b6 Name Value Unknown 0 Before 1 After 2 Menstrual Cycle \u00b6 Physical symptoms \u00b6 Name Value None 0b000000000 Acne 0b000000001 Bloating 0b000000010 Cramps 0b000000100 Constipation 0b000001000 Fatigue 0b000010000 Headache 0b000100000 Joint muscle pain 0b001000000 Spotting 0b010000000 Tender breasts 0b100000000 Other symptoms \u00b6 Name Value None 0b00000000 Anxiety 0b00000001 Crying spells 0b00000010 Depression 0b00000100 High sex drive 0b00001000 Insomnia 0b00010000 Mood swings 0b00100000 Poor concentration 0b01000000 Social withdrawal 0b10000000 Sexual activity \u00b6 Name Value None 0b0000 Masturbation 0b0001 No sex 0b0010 Protected sex 0b0100 Sex 0b1000 Mood level \u00b6 Name Value Unknown 0b00000000000 Amazing 0b00000000001 Happy 0b00000000010 Excited 0b00000000100 Stressed 0b00000001000 Focused 0b00000010000 Tired 0b00000100000 Sad 0b00001000000 Sick 0b00010000000 Exhausted 0b00100000000 Nervous 0b01000000000 Angry 0b10000000000 Organ donor \u00b6 Name Value Unknown 0 Yes 1 No 2 Access policies permissions \u00b6 Name Value None 0b00 Read 0b01 Write 0b10 All 0b11","title":"Data entities"},{"location":"entities/#data-entities","text":"","title":"Data entities"},{"location":"entities/#records","text":"A Record is a data entity that represents an health-related information. Records are divided in metrics in order to be grouped with similar data entities. Metrics are grouped in four macro-groups:","title":"Records"},{"location":"entities/#activity","text":"Fitness-related metrics Metric id Type Description Values 0001 CyclingRecord Cycling distance [ km ], elevationGain [ m ], avgSpeed [ km/h ], time, duration 0002 RunningRecord Running distance [ km ], avgSpeed [ km/h ], time, duration 0003 WalkingRecord Steps counter distance [ km ], steps, time, duration 0004 WorkoutRecord Workout activity calories [ cal ], notes, time range","title":"Activity"},{"location":"entities/#body","text":"Body-related metrics Metric id Type Description Values 1001 AbdominalCircumferenceRecord Abdominal circumference value [ cm ], time 1002 BodyMassIndexRecord BMI value [ kg/(m^2) ], time 1003 BodyTemperatureRecord Body temperature value [ \u00baC ], time 1004 LeanBodyMassRecord Lean body mass value, time 1005 MenstrualCycleRecord Menstrual cycle flow sexualActivity, physicalSymptoms, otherSymptoms, value (flow), time 1006 UvIndexRecord Uv index value, time 1007 WaterIntakeRecord Intake of a glass of water value (glasses), time 1008 WeightRecord Mass (aka Weight) value [ kg ], time","title":"Body"},{"location":"entities/#breathing","text":"Breathing-related metrics Metric id Type Description Values 2001 InhalerUsageRecord Inhaler usage notes, time 2002 OxygenSaturationRecord Inhaler usage value [ % ], time 2003 PeakExpiratoryFlowRecord Inhaler usage value [ PEF ], time 2004 RespiratoryRateRecord Respiratory rate value [ bpm ], time 2005 VitalCapacityRecord Vital capacity value [ cm^3 ], time","title":"Breathing"},{"location":"entities/#heart-blood","text":"Heart and blood metrics Metric id Type Description Values 3001 BloodAlcoholConcentrationRecord Blood / Alcohol content value [ % ], time 3002 BloodPressureRecord Blood pressure systolic [ mmHg ], diastolic [ mmHg ], time 3003 GlucoseRecord Blood glucose value [ mg/dL ], is before meal, time 3004 HeartRateRecord Heart rate value [ bpm ], time 3005 PerfusionIndexRecord Perfusion index value [ % ], time","title":"Heart &amp; blood"},{"location":"entities/#mindfulness","text":"Mindfulness and well-being metrics Metric id Type Description Values 4001 MeditationRecord Meditation time, duration 4002 MoodRecord Mood journal moodLevel, notes, time, duration 4003 SleepRecord Sleep time, duration","title":"Mindfulness"},{"location":"entities/#medical-profile","text":"A medical profile consists of a set of fixed basic medical information about the user. This data will not have the same level of protection like the Records in order to allow access from when the screen is locked in case of emergency. Name Description Allergies A note about user\u2019s allergies Biological sex User\u2019s biological sex Blood type User\u2019s blood type Height Height of the user [ cm ] (Is an) organ donor Whether the user is an organ donor Medications A note about user\u2019s medications Notes Any additional information the user may want to provide","title":"Medical profile"},{"location":"entities/#reference-values","text":"Records and Medical profiles have some fields that accept only a fixed set of possible values.","title":"Reference values"},{"location":"entities/#biological-sex","text":"Name Value Unknown 0 Female 1 Male 2","title":"Biological sex"},{"location":"entities/#bloodtype","text":"Name Value Unknown 0 0- 1 0+ 2 A- 3 A+ 4 B- 5 B+ 6 AB- 7 AB+ 8 HH 9","title":"BloodType"},{"location":"entities/#meal-relation","text":"Name Value Unknown 0 Before 1 After 2","title":"Meal relation"},{"location":"entities/#menstrual-cycle","text":"","title":"Menstrual Cycle"},{"location":"entities/#physical-symptoms","text":"Name Value None 0b000000000 Acne 0b000000001 Bloating 0b000000010 Cramps 0b000000100 Constipation 0b000001000 Fatigue 0b000010000 Headache 0b000100000 Joint muscle pain 0b001000000 Spotting 0b010000000 Tender breasts 0b100000000","title":"Physical symptoms"},{"location":"entities/#other-symptoms","text":"Name Value None 0b00000000 Anxiety 0b00000001 Crying spells 0b00000010 Depression 0b00000100 High sex drive 0b00001000 Insomnia 0b00010000 Mood swings 0b00100000 Poor concentration 0b01000000 Social withdrawal 0b10000000","title":"Other symptoms"},{"location":"entities/#sexual-activity","text":"Name Value None 0b0000 Masturbation 0b0001 No sex 0b0010 Protected sex 0b0100 Sex 0b1000","title":"Sexual activity"},{"location":"entities/#mood-level","text":"Name Value Unknown 0b00000000000 Amazing 0b00000000001 Happy 0b00000000010 Excited 0b00000000100 Stressed 0b00000001000 Focused 0b00000010000 Tired 0b00000100000 Sad 0b00001000000 Sick 0b00010000000 Exhausted 0b00100000000 Nervous 0b01000000000 Angry 0b10000000000","title":"Mood level"},{"location":"entities/#organ-donor","text":"Name Value Unknown 0 Yes 1 No 2","title":"Organ donor"},{"location":"entities/#access-policies-permissions","text":"Name Value None 0b00 Read 0b01 Write 0b10 All 0b11","title":"Access policies permissions"},{"location":"partner/","text":"Lineage Health Mod partner customization \u00b6 It is possible for OEMs to provide a package (which must be put in a system partition) for it to be picked up by the CareCache module to configure a number of customizations. Default Access Policy \u00b6 It is possible to provide a default configuration to the AccessContentProvider to allow OEMs to set some policies as soon as the ContentProvider is initialized. It will still be possible to override those policies later with the usual set of APIs. The import of the default policies happens only once when the partner customization app is first found by CareCache. No later changes are allowed by design, to avoid disrupting user\u2019s configuration. Config Structure \u00b6 The default access policy file must be located in res/xml/access_policy.xml to be parsed. Reference implementation: <policies version= \"1\" > <package name= \"com.example.a\" > <policy metric= \"1001\" permissions= \"1\" /> <policy metric= \"1002\" permissions= \"0\" /> <policy metric= \"1003\" /> <policy metric= \"1004\" /> <policy metric= \"1005\" /> </package> <package name= \"com.example.b\" > <policy metric= \"2003\" permissions= \"1\" /> <policy metric= \"2005\" permissions= \"0\" /> <policy metric= \"1003\" /> </package> </policies> policies : The root tag. The version attribute (type int) must be specified to match the version specified by the CareCache app in order for the file to be parsed. package : Identifies a set of policies for a specific app. The name attribute (type string) must be specified to set the target package for the included policies. policy : Defines a policy for a given package (parent tag). The metric attribute (type int) must be defined and be a valid metric id value . The permissions attribute is optional but it must be a valid access permissions value . Defaults to 0 / None","title":"Partner"},{"location":"partner/#lineage-health-mod-partner-customization","text":"It is possible for OEMs to provide a package (which must be put in a system partition) for it to be picked up by the CareCache module to configure a number of customizations.","title":"Lineage Health Mod partner customization"},{"location":"partner/#default-access-policy","text":"It is possible to provide a default configuration to the AccessContentProvider to allow OEMs to set some policies as soon as the ContentProvider is initialized. It will still be possible to override those policies later with the usual set of APIs. The import of the default policies happens only once when the partner customization app is first found by CareCache. No later changes are allowed by design, to avoid disrupting user\u2019s configuration.","title":"Default Access Policy"},{"location":"partner/#config-structure","text":"The default access policy file must be located in res/xml/access_policy.xml to be parsed. Reference implementation: <policies version= \"1\" > <package name= \"com.example.a\" > <policy metric= \"1001\" permissions= \"1\" /> <policy metric= \"1002\" permissions= \"0\" /> <policy metric= \"1003\" /> <policy metric= \"1004\" /> <policy metric= \"1005\" /> </package> <package name= \"com.example.b\" > <policy metric= \"2003\" permissions= \"1\" /> <policy metric= \"2005\" permissions= \"0\" /> <policy metric= \"1003\" /> </package> </policies> policies : The root tag. The version attribute (type int) must be specified to match the version specified by the CareCache app in order for the file to be parsed. package : Identifies a set of policies for a specific app. The name attribute (type string) must be specified to set the target package for the included policies. policy : Defines a policy for a given package (parent tag). The metric attribute (type int) must be defined and be a valid metric id value . The permissions attribute is optional but it must be a valid access permissions value . Defaults to 0 / None","title":"Config Structure"},{"location":"privacy_security/","text":"Privacy & Security \u00b6 CareCache never shares your data to any remote server directly, so your data never leaves your device unless it\u2019s being pulled by a 3 rd party system that will host it on an external platform. Users have great controls over how their health data flows across different services, while the CareCache takes steps to ensure that local data remains protected. CareCache takes advantages of existing robust standard security mechanisms of Android (such as runtime permissions and FBE) to safeguard user\u2019s data. It can offer even more protection thanks to its custom set of SEPolicies that can be enabled when building the Health Mod inside the system. At the low level, the Health Mod consists of a number of ContentProviders that have their data stored in a secure location. Each ContentProvider is guarded by its own runtime permission . OEMs have access to an additional ContentProvider that can deny read and/or write access policies for each particular metric to every single app. This should be used by OEMs to enforce custom policies or to allow the user to have complete control over the data flow (as in the Lineage Health app). Moreover OEMs may provide a \u201cpartner customization\u201d app in their system builds to customize some parts of the Health Mod. See the partner documentation for more information. Permissions \u00b6 To access any Record belonging to a specific metric group, the acting app must request an Android runtime permission so that the user may approve access to a specific set of data. The following runtime permissions are used: lineageos.permission.HEALTH_ACCESS Can be accessed by: system , signature Usage: Implement policies that define granular per-app access to each metric regardless of other permissions lineageos.permission.HEALTH_ACTIVITY Can be accessed by: runtime ( dangerous ) Usage: Access to fitness-related metrics. May be overridden by system policies lineageos.permission.HEALTH_BODY Can be accessed by: runtime ( dangerous ) Usage: Access to body-related metrics. May be overridden by system policies lineageos.permission.HEALTH_BREATHING Can be accessed by: runtime ( dangerous ) Usage: Access to breathing-related metrics. May be overridden by system policies lineageos.permission.HEALTH_HEART_BLOOD Can be accessed by: runtime ( dangerous ) Usage: Access to heart and blood-related metrics. May be overridden by system policies lineageos.permission.HEALTH_MINDFULNESS Can be accessed by: runtime ( dangerous ) Usage: Access to mindfulness-related metrics. May be overridden by system policies lineageos.permission.HEALTH_MEDICAL_PROFILE Can be accessed by: runtime ( dangerous ) Usage: Access to medical profile data. Cannot be overridden by system policies SEPolicies \u00b6 Additional SEPolicies are available for OEMs who whish to implement CareCache in their builds. The source code repository provides example implementation of SEPolicies to increase the security of stored user data by restricting access to the Mod app data. It is recommend to make use of the additional rules to make users\u2019 data safer when building the Health Mod inside the system.","title":"Privacy & Security"},{"location":"privacy_security/#privacy-security","text":"CareCache never shares your data to any remote server directly, so your data never leaves your device unless it\u2019s being pulled by a 3 rd party system that will host it on an external platform. Users have great controls over how their health data flows across different services, while the CareCache takes steps to ensure that local data remains protected. CareCache takes advantages of existing robust standard security mechanisms of Android (such as runtime permissions and FBE) to safeguard user\u2019s data. It can offer even more protection thanks to its custom set of SEPolicies that can be enabled when building the Health Mod inside the system. At the low level, the Health Mod consists of a number of ContentProviders that have their data stored in a secure location. Each ContentProvider is guarded by its own runtime permission . OEMs have access to an additional ContentProvider that can deny read and/or write access policies for each particular metric to every single app. This should be used by OEMs to enforce custom policies or to allow the user to have complete control over the data flow (as in the Lineage Health app). Moreover OEMs may provide a \u201cpartner customization\u201d app in their system builds to customize some parts of the Health Mod. See the partner documentation for more information.","title":"Privacy &amp; Security"},{"location":"privacy_security/#permissions","text":"To access any Record belonging to a specific metric group, the acting app must request an Android runtime permission so that the user may approve access to a specific set of data. The following runtime permissions are used: lineageos.permission.HEALTH_ACCESS Can be accessed by: system , signature Usage: Implement policies that define granular per-app access to each metric regardless of other permissions lineageos.permission.HEALTH_ACTIVITY Can be accessed by: runtime ( dangerous ) Usage: Access to fitness-related metrics. May be overridden by system policies lineageos.permission.HEALTH_BODY Can be accessed by: runtime ( dangerous ) Usage: Access to body-related metrics. May be overridden by system policies lineageos.permission.HEALTH_BREATHING Can be accessed by: runtime ( dangerous ) Usage: Access to breathing-related metrics. May be overridden by system policies lineageos.permission.HEALTH_HEART_BLOOD Can be accessed by: runtime ( dangerous ) Usage: Access to heart and blood-related metrics. May be overridden by system policies lineageos.permission.HEALTH_MINDFULNESS Can be accessed by: runtime ( dangerous ) Usage: Access to mindfulness-related metrics. May be overridden by system policies lineageos.permission.HEALTH_MEDICAL_PROFILE Can be accessed by: runtime ( dangerous ) Usage: Access to medical profile data. Cannot be overridden by system policies","title":"Permissions"},{"location":"privacy_security/#sepolicies","text":"Additional SEPolicies are available for OEMs who whish to implement CareCache in their builds. The source code repository provides example implementation of SEPolicies to increase the security of stored user data by restricting access to the Mod app data. It is recommend to make use of the additional rules to make users\u2019 data safer when building the Health Mod inside the system.","title":"SEPolicies"},{"location":"product_document/","text":"CareCache \u00b6 Copy of the original development product document written by @bvlj and @vazguard Intro & goal \u00b6 Our goal is to make the Lineage Health platform the best option for tracking and safeguarding your personal medical information. While other apps in this space focus on fitness analysis and highlights, Lineage will offer a wider view of stored data while keeping it protected under a strong API that gives users ultimate power over its access. The current release plan is to launch CareCache in both the current active branches Unless the project has verified medical backing, a warning should be presented that CareCache is meant to help track data as a recreational tool and should not be used as a primary source during medical emergencies Who\u2019s it for? \u00b6 Health conscious - those with active interests in maintaining a record of their own health, whether it be for fitness or due to a health condition Privacy nerds - those who want to track even basic fitness but want clarity on how its shared around Why build it? \u00b6 Health tracking is a part of the growing global market for digital health solutions Android\u2019s health data API\u2019s are not adequate - there are no standard or open source options Google Fit is focused on displaying and processing high-level fitness data only Advanced users care about control, and others in this space don\u2019t offer it directly As an open source project, CareCache will be built transparently and thus gains a unique element of trust and verification Survey \u00b6 The survey goal is to understand the Lineage community\u2019s perspective on health and well-being, its application in the mobile space, and unique needs members may have that aren\u2019t covered in currently available options: reddit twitter What is it? \u00b6 The Lineage Health platform is composed of two elements - the CareCache API , and the Health app to manage it. API \u00b6 The API controls two main groups of data: Records and MedicalProfile . Records are organized under various categories based on the type of data they hold. MedicalProfile \u00b6 This group contains \u201cstatic\u201d information about the user/person. Medical Profile has the following fields: Sex Blood type Weight Height (Is an) Organ donor Medications Allergies Conditions Additional notes Records \u00b6 A record is the most generic data structure. Any data inside the store is a record. Records are stored inside the database and can be indexed by time and metric . Records have the following fields: Categories \u00b6 Metrics (see below) are organized into 5 categories: these categories are used to group metrics of related data. Metrics \u00b6 Metrics organize record data under a hierarchy. CareCache API updates can add new metrics as needed. Developers are encouraged to submit new categories. Activity \u00b6 Type Description Values CyclingRecord Cycling distance [km], elevation gain [m], avg speed [km/h], time range RunningRecord Running distance [km], avg speed [km/h], time range WalkingRecord Steps counter distance [km], steps [int], time range WorkoutRecord Workout activity burned calories [cal], notes, time range Body \u00b6 Type Description Values AbdominalCircumferenceRecord Abdominal circumference value [cm], time BodyMassIndexRecord BMI value [kg/(m^2)], time BodyTemperatureRecord Body temperature value [\u00baC], time LeanBodyMassRecord Lean body mass value [float], time MenstrualCycleRecord Menstrual cycle flow sexual activity, physical & other symptoms, value [flow], time UvIndexRecord Uv index value [float], time WaterIntakeRecord Intake of a glass of water value [glasses], time WeightRecord Mass (aka Weight) value [kg], time Breathing \u00b6 Type Description Values InhalerUsageRecord Inhaler usage notes, time OxygenSaturationRecord Inhaler usage value [%], time PeakExpiratoryFlowRecord Inhaler usage value [PEF], time RespiratoryRateRecord Respiratory rate value [bpm], time VitalCapacityRecord Vital capacity value [cm^3], time Heart & blood \u00b6 Type Description Values BloodAlcoholConcentrationRecord Blood / Alcohol content value [%], time BloodPressureRecord Blood pressure systolic [mmHg], diastolic [mmHg], time GlucoseRecord Blood glucose value [mg/dL], before meal [bool], time HeartRateRecord Heart rate value [bpm], time PerfusionIndexRecord Perfusion index value [%], time Mindfulness \u00b6 Type Description Values MeditationRecord Meditation time range MoodRecord Mood journal mood level, notes, time SleepRecord Sleep time range Compatibility \u00b6 CareCache uses standard Android features that are supposed to work across all GMS-certified devices and all devices running official LineageOS builds (with the exception of custom SELinux context for non-LineageOS devices except those that include such rules at build time). CareCache is also ensured to not break any compatibility with the Android CDD as it\u2019s tested on GMS-certified production builds as well by an external trusted 3 rd -party. CareCache is currently built with minSdk 27 (Android 8.1) and targetSdk 29 (Android 10, soon to be upgraded to 30 / Android 11). Theoretically it\u2019s possible to install the CareCache Mod on any device running Android 8.1+. Persona \u00b6 User 1 \u00b6 Background Is familiar with fitness applications Has a wearable device Goals Get motivation to keep fit (Nudges, stats\u2026) Needs A centralized place to store all the fitness data from different sources Possibility to import data from the wearable User 2 \u00b6 Background Is privacy-conscious, doesn\u2019t trust proprietary apps to handle any sensitive information Is interested in keeping track of his / her health conditions Goals Store health data in a trustable environment for easy access Needs Peace of mind through the control over data flow (granular access to each app, ability to delete data at will) The service provider is transparent in how data is handled User 3 \u00b6 Background Data nerd Loves to keep track of all his / her life Goals Record, access and analyze all health data to gain insights Needs Easy way to export data to a format that can be used for data analysis On-device overview and stats User 4 \u00b6 Background Interested in mental health to improve performance at work Goals Track and improve mental health Needs A method to help stay motivated in doing meditation A way to analyze sleep and mood variations across days and events Privacy \u00b6 CareCache takes cues from the Trust interface and Privacy Guard. Access to different categories of data have their own separate Android runtime permissions . Even if an app is granted access through standard permissions, apps can still be blacklisted from selected metrics by users. If an app tries to read data from a metric it has been blacklisted from, an empty data set will be returned. Likewise, if an app tries to write to a blacklisted metric, the operation will fail. A special permission, granted only to privileged / sys-signature apps, guards access to modifying the blacklist. A possible variation of this permission model is one that works in a similar way, but the read / write concepts are separated in the blacklist rather than at android runtime permission level. This allows us to provide more granular controls (eg. for each metric an user could choose between \u201cRead + Write\u201d, \u201cRead\u201d, \u201cWrite\u201d, \u201cNothing\u201d). On the other hand this model gives the app requesting permission immediate read and write access until the user goes to the Health app and toggles the access on its own. This means that more responsibility is put on the user\u2019s hands as the operative system will be more permissive by default (unfortunately we can\u2019t redirect the user to the blacklist ui upon permission grant as iOS does because of Android limitations we can\u2019t remove). Permission combination \u00b6 This table shows the various levels of segregation and protection of data. Each column represents a specific point where anyone/thing trying to access may be blocked at any point by the user. The app The category The action The metric MyBike wants to access all the activities to get information on cycling records HappyHeart wants to access heart related data to insert a pulse reading BadStepCounter wants to access mindfulness data to read information about the user mood for advertising purposes Android runtime permission Access policies Security \u00b6 For storing data we took an approach similar to how other sensitive data such as contacts, call logs and messages are stored, and applied extra protection to ensure data is safe. All the security measures used here are built using existing battle-tested solutions such as Android ContentProviders, Android Keystore, SELinux and SQLite encryption. All the low level data access operations are performed by the CareCache Mod, an app which hosts content providers in which records and other data are saved. The content providers are a standard way for android apps to expose their data to other processes in a safe way thanks to the support of Android Runtime permissions. The CareCache Mod app can also be put in a special SELinux context with tight rules that prevent other apps from accessing its data folder when SELinux is being enforced. There exists multiple separate databases: the records database, the access-control database and the medical profile database. The records database and the access-control database are stored in the credential-encrypted area of the userdata partition, available only when the device is unlocked. Moreover an additional layer of encryption is provided by the usage of an encrypted database (SQLCipher) and the key required to open that database is stored in an encrypted string which can be decrypted using another key is stored inside the device\u2019s Android Keystore. The medical profile database on the other hand is stored in the device-encrypted area of the userdata partition, which means that data is accessible in \u201cplain text\u201d once the device is booted, even before the user has authenticated through pin / password / pattern / biometrical unlock. This is done to make sure that this data is accessible from the emergency information app, which is to remain available even if the device is locked in case of emergency situations. Since Lineage has no cloud systems, there are no backups or off-site storage beyond the locally stored data. If the device has outstanding security issues, such as permissive SELinux, notices will appear in the health app warning users that their private data is at risk, along with ways to remedy the issue.","title":"Info"},{"location":"product_document/#carecache","text":"Copy of the original development product document written by @bvlj and @vazguard","title":"CareCache"},{"location":"product_document/#intro-goal","text":"Our goal is to make the Lineage Health platform the best option for tracking and safeguarding your personal medical information. While other apps in this space focus on fitness analysis and highlights, Lineage will offer a wider view of stored data while keeping it protected under a strong API that gives users ultimate power over its access. The current release plan is to launch CareCache in both the current active branches Unless the project has verified medical backing, a warning should be presented that CareCache is meant to help track data as a recreational tool and should not be used as a primary source during medical emergencies","title":"Intro &amp; goal"},{"location":"product_document/#whos-it-for","text":"Health conscious - those with active interests in maintaining a record of their own health, whether it be for fitness or due to a health condition Privacy nerds - those who want to track even basic fitness but want clarity on how its shared around","title":"Who's it for?"},{"location":"product_document/#why-build-it","text":"Health tracking is a part of the growing global market for digital health solutions Android\u2019s health data API\u2019s are not adequate - there are no standard or open source options Google Fit is focused on displaying and processing high-level fitness data only Advanced users care about control, and others in this space don\u2019t offer it directly As an open source project, CareCache will be built transparently and thus gains a unique element of trust and verification","title":"Why build it?"},{"location":"product_document/#survey","text":"The survey goal is to understand the Lineage community\u2019s perspective on health and well-being, its application in the mobile space, and unique needs members may have that aren\u2019t covered in currently available options: reddit twitter","title":"Survey"},{"location":"product_document/#what-is-it","text":"The Lineage Health platform is composed of two elements - the CareCache API , and the Health app to manage it.","title":"What is it?"},{"location":"product_document/#api","text":"The API controls two main groups of data: Records and MedicalProfile . Records are organized under various categories based on the type of data they hold.","title":"API"},{"location":"product_document/#medicalprofile","text":"This group contains \u201cstatic\u201d information about the user/person. Medical Profile has the following fields: Sex Blood type Weight Height (Is an) Organ donor Medications Allergies Conditions Additional notes","title":"MedicalProfile"},{"location":"product_document/#records","text":"A record is the most generic data structure. Any data inside the store is a record. Records are stored inside the database and can be indexed by time and metric . Records have the following fields:","title":"Records"},{"location":"product_document/#categories","text":"Metrics (see below) are organized into 5 categories: these categories are used to group metrics of related data.","title":"Categories"},{"location":"product_document/#metrics","text":"Metrics organize record data under a hierarchy. CareCache API updates can add new metrics as needed. Developers are encouraged to submit new categories.","title":"Metrics"},{"location":"product_document/#activity","text":"Type Description Values CyclingRecord Cycling distance [km], elevation gain [m], avg speed [km/h], time range RunningRecord Running distance [km], avg speed [km/h], time range WalkingRecord Steps counter distance [km], steps [int], time range WorkoutRecord Workout activity burned calories [cal], notes, time range","title":"Activity"},{"location":"product_document/#body","text":"Type Description Values AbdominalCircumferenceRecord Abdominal circumference value [cm], time BodyMassIndexRecord BMI value [kg/(m^2)], time BodyTemperatureRecord Body temperature value [\u00baC], time LeanBodyMassRecord Lean body mass value [float], time MenstrualCycleRecord Menstrual cycle flow sexual activity, physical & other symptoms, value [flow], time UvIndexRecord Uv index value [float], time WaterIntakeRecord Intake of a glass of water value [glasses], time WeightRecord Mass (aka Weight) value [kg], time","title":"Body"},{"location":"product_document/#breathing","text":"Type Description Values InhalerUsageRecord Inhaler usage notes, time OxygenSaturationRecord Inhaler usage value [%], time PeakExpiratoryFlowRecord Inhaler usage value [PEF], time RespiratoryRateRecord Respiratory rate value [bpm], time VitalCapacityRecord Vital capacity value [cm^3], time","title":"Breathing"},{"location":"product_document/#heart-blood","text":"Type Description Values BloodAlcoholConcentrationRecord Blood / Alcohol content value [%], time BloodPressureRecord Blood pressure systolic [mmHg], diastolic [mmHg], time GlucoseRecord Blood glucose value [mg/dL], before meal [bool], time HeartRateRecord Heart rate value [bpm], time PerfusionIndexRecord Perfusion index value [%], time","title":"Heart &amp; blood"},{"location":"product_document/#mindfulness","text":"Type Description Values MeditationRecord Meditation time range MoodRecord Mood journal mood level, notes, time SleepRecord Sleep time range","title":"Mindfulness"},{"location":"product_document/#compatibility","text":"CareCache uses standard Android features that are supposed to work across all GMS-certified devices and all devices running official LineageOS builds (with the exception of custom SELinux context for non-LineageOS devices except those that include such rules at build time). CareCache is also ensured to not break any compatibility with the Android CDD as it\u2019s tested on GMS-certified production builds as well by an external trusted 3 rd -party. CareCache is currently built with minSdk 27 (Android 8.1) and targetSdk 29 (Android 10, soon to be upgraded to 30 / Android 11). Theoretically it\u2019s possible to install the CareCache Mod on any device running Android 8.1+.","title":"Compatibility"},{"location":"product_document/#persona","text":"","title":"Persona"},{"location":"product_document/#user-1","text":"Background Is familiar with fitness applications Has a wearable device Goals Get motivation to keep fit (Nudges, stats\u2026) Needs A centralized place to store all the fitness data from different sources Possibility to import data from the wearable","title":"User 1"},{"location":"product_document/#user-2","text":"Background Is privacy-conscious, doesn\u2019t trust proprietary apps to handle any sensitive information Is interested in keeping track of his / her health conditions Goals Store health data in a trustable environment for easy access Needs Peace of mind through the control over data flow (granular access to each app, ability to delete data at will) The service provider is transparent in how data is handled","title":"User 2"},{"location":"product_document/#user-3","text":"Background Data nerd Loves to keep track of all his / her life Goals Record, access and analyze all health data to gain insights Needs Easy way to export data to a format that can be used for data analysis On-device overview and stats","title":"User 3"},{"location":"product_document/#user-4","text":"Background Interested in mental health to improve performance at work Goals Track and improve mental health Needs A method to help stay motivated in doing meditation A way to analyze sleep and mood variations across days and events","title":"User 4"},{"location":"product_document/#privacy","text":"CareCache takes cues from the Trust interface and Privacy Guard. Access to different categories of data have their own separate Android runtime permissions . Even if an app is granted access through standard permissions, apps can still be blacklisted from selected metrics by users. If an app tries to read data from a metric it has been blacklisted from, an empty data set will be returned. Likewise, if an app tries to write to a blacklisted metric, the operation will fail. A special permission, granted only to privileged / sys-signature apps, guards access to modifying the blacklist. A possible variation of this permission model is one that works in a similar way, but the read / write concepts are separated in the blacklist rather than at android runtime permission level. This allows us to provide more granular controls (eg. for each metric an user could choose between \u201cRead + Write\u201d, \u201cRead\u201d, \u201cWrite\u201d, \u201cNothing\u201d). On the other hand this model gives the app requesting permission immediate read and write access until the user goes to the Health app and toggles the access on its own. This means that more responsibility is put on the user\u2019s hands as the operative system will be more permissive by default (unfortunately we can\u2019t redirect the user to the blacklist ui upon permission grant as iOS does because of Android limitations we can\u2019t remove).","title":"Privacy"},{"location":"product_document/#permission-combination","text":"This table shows the various levels of segregation and protection of data. Each column represents a specific point where anyone/thing trying to access may be blocked at any point by the user. The app The category The action The metric MyBike wants to access all the activities to get information on cycling records HappyHeart wants to access heart related data to insert a pulse reading BadStepCounter wants to access mindfulness data to read information about the user mood for advertising purposes Android runtime permission Access policies","title":"Permission combination"},{"location":"product_document/#security","text":"For storing data we took an approach similar to how other sensitive data such as contacts, call logs and messages are stored, and applied extra protection to ensure data is safe. All the security measures used here are built using existing battle-tested solutions such as Android ContentProviders, Android Keystore, SELinux and SQLite encryption. All the low level data access operations are performed by the CareCache Mod, an app which hosts content providers in which records and other data are saved. The content providers are a standard way for android apps to expose their data to other processes in a safe way thanks to the support of Android Runtime permissions. The CareCache Mod app can also be put in a special SELinux context with tight rules that prevent other apps from accessing its data folder when SELinux is being enforced. There exists multiple separate databases: the records database, the access-control database and the medical profile database. The records database and the access-control database are stored in the credential-encrypted area of the userdata partition, available only when the device is unlocked. Moreover an additional layer of encryption is provided by the usage of an encrypted database (SQLCipher) and the key required to open that database is stored in an encrypted string which can be decrypted using another key is stored inside the device\u2019s Android Keystore. The medical profile database on the other hand is stored in the device-encrypted area of the userdata partition, which means that data is accessible in \u201cplain text\u201d once the device is booted, even before the user has authenticated through pin / password / pattern / biometrical unlock. This is done to make sure that this data is accessible from the emergency information app, which is to remain available even if the device is locked in case of emergency situations. Since Lineage has no cloud systems, there are no backups or off-site storage beyond the locally stored data. If the device has outstanding security issues, such as permissive SELinux, notices will appear in the health app warning users that their private data is at risk, along with ways to remedy the issue.","title":"Security"},{"location":"usage/","text":"Develop a new integration \u00b6 Android ContentResolver \u00b6 App developers may access CareCache through the standard Android\u2019s ContentResolver without requiring the addition of any new external dependency. Please take a look at the sdk code to see how to properly use the raw ContentProvider. This is not recommended for most use cases: no guarantee is made to the stability of the ContentProvider interfaces (although they\u2019ll be kept as stable as possible). The usage of the official sdk library is encouraged. SDK library \u00b6 The official SDK library reduces the amount of boilerplate required for communicating with the underlying ContentProvider and provides a swift and simple way to join the ecosystem. The SDK is written in Java but is expected to work with Kotlin projects as well. Adding to your project \u00b6 You can find the SDK library on jcenter , so it can be easily imported in your project: dependencies { implementation \"org.lineageos:mod.health-sdk:1.0.0-alpha01\" } Note: jCenter is shutting down, we\u2019ll be migrating to another provider soon Requesting access to a category \u00b6 In order to interact with any kind of data, you need to your app granted the required runtime permission . Simple example for requesting access to the Body metrics group: // Check whether the app has the required permission boolean hasBodyPermission = checkSelfPermission ( HsRuntimePermission . BODY ) == PackageManager . PERMISSION_GRANTED ; if ( ! hasBodyPermission ) { // Ask the user for the permission. // REQUEST_BODY_PERMISSION is an integer value that's going to be re-used in the // onRequestPermissionsResult() Activity method final String [] permissions = new String [] { HsRuntimePermission . BODY }; requestPermissions ( permissions , REQUEST_BODY_PERMISSION ); } Reading records \u00b6 Reading operations can take some time, so it\u2019s important to not run them on the main thread. If you\u2019re using kotlin coroutines, the IO dispatcher should be used to wrap all the queries. To access all the records of a specific metric, use the getAll*Records() method of the appropriate category repository object (replace the * with the metric name). To access a specific record (given its id ), use the get*Record(id) method of the appropriate category repository object (replace the * with the metric name). Simple example for reading all walking records in the past week: // Obtain the repository ActivityRecordsRepo repo = ActivityRecordsRepo . getInstance ( getContentResolver ()); // Define a filter interval long now = System . currentTimeMillis (); long oneWeekAgo = now - ( 1000L * 60L * 60L * 24L * 7L ); // Get records from the repository and filter them List < WalkingRecord > walkingRecordsLastWeek = repo . getAllWalkingRecords () . stream () . filter ( it -> it . getTime () > oneWeekAgo && it . getTime () < now ) . collect ( Collectors . toList ()); Inserting, updating and deleting records \u00b6 Insertion and updating operations can take some time, so it\u2019s important to not run them on the main thread. If you\u2019re using kotlin coroutines, the IO dispatcher should be used to wrap all the queries. To insert a new record object, simply use the insert(record) method of the repository object. To update a new record object, simply use the update(record) method of the repository object. To delete a new record object, simply use the delete(record) method of the repository object. Each of these operations will return an OperationResult object. This object is an instance of exactly one of the following: OperationResult.Success<T> where <T> is Long for the insert method. The .result field will hold the newly inserted record id Integer for the update method. The .result field will hold the number of updated records Integer for the delete method. The .result field will hold the number of delete records OperationResult.PolicyError if a(n user-defined) policy prevented this app from performing such action OperationResult.Failure if an error occurred while performing the operation. Make sure your data is valid (e.g. negative mass values) and check the logs for further details. Simple example for inserting a new running activity record with the following values: {Time: just ended, Lasted: 30 minutes (1800000 ms), Distance: 3.21km, Average speed: 6.42 km/h} : RunningRecord record = new RunningRecord ( 0 L , System . currentTimeMillis (), 1800000L , SpeedValue . kilometersPerHour ( 6.42 ), LengthValue . kilometers ( 3.21 )); OperationResult insertionResult = repo . insert ( record ); if ( insertionResult instanceof OperationResult . Success ) { // Insertion completed successfully } else if ( insertionResult instanceof OperationResult . PolicyError ) { // A(n user-defined) policy prevented this application from performing this action } else if ( updateResult instanceof OperationResult . Failure ) { // Operation failed due to some error. Check data validity } Batch operations \u00b6 It is possible (and recommended) to perform multiple operations in batch where possible by using the repository object\u2019s .executeBatch(builder) method. See this example that imports glucose readings from a source, converts them to GlucoseRecord objects and inserts them in batch: HeartBloodRecordsRepo repo = HeartBloodRecordsRepo . getInstance ( getContentResolver ()); OperationResult [] results = repo . executeBatch ( composer -> { otherDataSource . getNewGlucoseReadings (). forEach ( item -> { // convertToRecord implementation made by the developer GlucoseRecord record = convertToRecord ( item ); // Compose batch operations with many .insert() for each item from the // the other data source composer . insert ( record ); }); }); // Check the results now... JavaDoc \u00b6 The JavaDoc is available here .","title":"Usage"},{"location":"usage/#develop-a-new-integration","text":"","title":"Develop a new integration"},{"location":"usage/#android-contentresolver","text":"App developers may access CareCache through the standard Android\u2019s ContentResolver without requiring the addition of any new external dependency. Please take a look at the sdk code to see how to properly use the raw ContentProvider. This is not recommended for most use cases: no guarantee is made to the stability of the ContentProvider interfaces (although they\u2019ll be kept as stable as possible). The usage of the official sdk library is encouraged.","title":"Android ContentResolver"},{"location":"usage/#sdk-library","text":"The official SDK library reduces the amount of boilerplate required for communicating with the underlying ContentProvider and provides a swift and simple way to join the ecosystem. The SDK is written in Java but is expected to work with Kotlin projects as well.","title":"SDK library"},{"location":"usage/#adding-to-your-project","text":"You can find the SDK library on jcenter , so it can be easily imported in your project: dependencies { implementation \"org.lineageos:mod.health-sdk:1.0.0-alpha01\" } Note: jCenter is shutting down, we\u2019ll be migrating to another provider soon","title":"Adding to your project"},{"location":"usage/#requesting-access-to-a-category","text":"In order to interact with any kind of data, you need to your app granted the required runtime permission . Simple example for requesting access to the Body metrics group: // Check whether the app has the required permission boolean hasBodyPermission = checkSelfPermission ( HsRuntimePermission . BODY ) == PackageManager . PERMISSION_GRANTED ; if ( ! hasBodyPermission ) { // Ask the user for the permission. // REQUEST_BODY_PERMISSION is an integer value that's going to be re-used in the // onRequestPermissionsResult() Activity method final String [] permissions = new String [] { HsRuntimePermission . BODY }; requestPermissions ( permissions , REQUEST_BODY_PERMISSION ); }","title":"Requesting access to a category"},{"location":"usage/#reading-records","text":"Reading operations can take some time, so it\u2019s important to not run them on the main thread. If you\u2019re using kotlin coroutines, the IO dispatcher should be used to wrap all the queries. To access all the records of a specific metric, use the getAll*Records() method of the appropriate category repository object (replace the * with the metric name). To access a specific record (given its id ), use the get*Record(id) method of the appropriate category repository object (replace the * with the metric name). Simple example for reading all walking records in the past week: // Obtain the repository ActivityRecordsRepo repo = ActivityRecordsRepo . getInstance ( getContentResolver ()); // Define a filter interval long now = System . currentTimeMillis (); long oneWeekAgo = now - ( 1000L * 60L * 60L * 24L * 7L ); // Get records from the repository and filter them List < WalkingRecord > walkingRecordsLastWeek = repo . getAllWalkingRecords () . stream () . filter ( it -> it . getTime () > oneWeekAgo && it . getTime () < now ) . collect ( Collectors . toList ());","title":"Reading records"},{"location":"usage/#inserting-updating-and-deleting-records","text":"Insertion and updating operations can take some time, so it\u2019s important to not run them on the main thread. If you\u2019re using kotlin coroutines, the IO dispatcher should be used to wrap all the queries. To insert a new record object, simply use the insert(record) method of the repository object. To update a new record object, simply use the update(record) method of the repository object. To delete a new record object, simply use the delete(record) method of the repository object. Each of these operations will return an OperationResult object. This object is an instance of exactly one of the following: OperationResult.Success<T> where <T> is Long for the insert method. The .result field will hold the newly inserted record id Integer for the update method. The .result field will hold the number of updated records Integer for the delete method. The .result field will hold the number of delete records OperationResult.PolicyError if a(n user-defined) policy prevented this app from performing such action OperationResult.Failure if an error occurred while performing the operation. Make sure your data is valid (e.g. negative mass values) and check the logs for further details. Simple example for inserting a new running activity record with the following values: {Time: just ended, Lasted: 30 minutes (1800000 ms), Distance: 3.21km, Average speed: 6.42 km/h} : RunningRecord record = new RunningRecord ( 0 L , System . currentTimeMillis (), 1800000L , SpeedValue . kilometersPerHour ( 6.42 ), LengthValue . kilometers ( 3.21 )); OperationResult insertionResult = repo . insert ( record ); if ( insertionResult instanceof OperationResult . Success ) { // Insertion completed successfully } else if ( insertionResult instanceof OperationResult . PolicyError ) { // A(n user-defined) policy prevented this application from performing this action } else if ( updateResult instanceof OperationResult . Failure ) { // Operation failed due to some error. Check data validity }","title":"Inserting, updating and deleting records"},{"location":"usage/#batch-operations","text":"It is possible (and recommended) to perform multiple operations in batch where possible by using the repository object\u2019s .executeBatch(builder) method. See this example that imports glucose readings from a source, converts them to GlucoseRecord objects and inserts them in batch: HeartBloodRecordsRepo repo = HeartBloodRecordsRepo . getInstance ( getContentResolver ()); OperationResult [] results = repo . executeBatch ( composer -> { otherDataSource . getNewGlucoseReadings (). forEach ( item -> { // convertToRecord implementation made by the developer GlucoseRecord record = convertToRecord ( item ); // Compose batch operations with many .insert() for each item from the // the other data source composer . insert ( record ); }); }); // Check the results now...","title":"Batch operations"},{"location":"usage/#javadoc","text":"The JavaDoc is available here .","title":"JavaDoc"},{"location":"versioning/","text":"Versioning \u00b6 The CareCache Mod and SDK both follow a parallel semantic versioning model. This means that a CareCache Mod (version X.Y.Z ) installed on a device is guaranteed to support any app that makes use of the SDK version X.*.* ). The Mod app might also support older SDKs by attempting to \u201cconvert\u201d the given data internally, but it is not guaranteed to work. Adding making changes to the metrics (adding a new field or even a new metric) requires a major version bump because there are strict checks in place to avoid invalid data being inserted into the database.","title":"Versioning"},{"location":"versioning/#versioning","text":"The CareCache Mod and SDK both follow a parallel semantic versioning model. This means that a CareCache Mod (version X.Y.Z ) installed on a device is guaranteed to support any app that makes use of the SDK version X.*.* ). The Mod app might also support older SDKs by attempting to \u201cconvert\u201d the given data internally, but it is not guaranteed to work. Adding making changes to the metrics (adding a new field or even a new metric) requires a major version bump because there are strict checks in place to avoid invalid data being inserted into the database.","title":"Versioning"}]}